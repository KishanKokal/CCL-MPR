{"ast":null,"code":"import BookApi from '../../api/book-api';\nexport const BookActionTypes = {\n  GET_BOOKS_RESPONSE: 'GET_BOOKS_RESPONSE',\n  ADD_NEW_BOOK_RESPONSE: 'ADD_NEW_BOOK_RESPONSE',\n  GET_BOOK_RESPONSE: 'GET_BOOK_RESPONSE',\n  UPDATE_BOOK_RESPONSE: 'UPDATE_BOOK_RESPONSE',\n  DELETE_BOOK_RESPONSE: 'DELETE_BOOK_RESPONSE'\n};\nexport const getBooksResponse = books => ({\n  type: BookActionTypes.GET_BOOKS_RESPONSE,\n  books\n});\nexport function getBooksAction() {\n  return dispatch => {\n    return BookApi.getAllBooks().then(books => {\n      dispatch(getBooksResponse(books));\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport const addNewBookResponse = () => ({\n  type: BookActionTypes.ADD_NEW_BOOK_RESPONSE\n});\nexport function saveBookAction(book) {\n  return function (dispatch) {\n    return BookApi.saveBook(book).then(() => {\n      if (book.id) {\n        dispatch(updateBookResponse());\n      } else {\n        dispatch(addNewBookResponse());\n      }\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport const getBookResponse = bookFound => ({\n  type: BookActionTypes.GET_BOOK_RESPONSE,\n  book: bookFound\n});\nexport function getBookAction(bookId) {\n  return dispatch => {\n    return BookApi.getBook(bookId).then(book => {\n      dispatch(getBookResponse(book));\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport const updateBookResponse = () => ({\n  type: BookActionTypes.UPDATE_BOOK_RESPONSE\n});\nexport const deleteBookResponse = () => ({\n  type: BookActionTypes.DELETE_BOOK_RESPONSE\n});\nexport function deleteBookAction(bookId) {\n  return dispatch => {\n    return BookApi.deleteBook(bookId).then(() => {\n      dispatch(deleteBookResponse());\n    }).then(() => {\n      dispatch(getBooksAction());\n    }).catch(error => {\n      throw error;\n    });\n  };\n}","map":{"version":3,"sources":["/Users/kishankokal/repos/CCL-Mini-Project/src/store/actions/books.actions.js"],"names":["BookApi","BookActionTypes","GET_BOOKS_RESPONSE","ADD_NEW_BOOK_RESPONSE","GET_BOOK_RESPONSE","UPDATE_BOOK_RESPONSE","DELETE_BOOK_RESPONSE","getBooksResponse","books","type","getBooksAction","dispatch","getAllBooks","then","catch","error","addNewBookResponse","saveBookAction","book","saveBook","id","updateBookResponse","getBookResponse","bookFound","getBookAction","bookId","getBook","deleteBookResponse","deleteBookAction","deleteBook"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AAEA,OAAO,MAAMC,eAAe,GAAI;AAC5BC,EAAAA,kBAAkB,EAAG,oBADO;AAE5BC,EAAAA,qBAAqB,EAAG,uBAFI;AAG5BC,EAAAA,iBAAiB,EAAG,mBAHQ;AAI5BC,EAAAA,oBAAoB,EAAG,sBAJK;AAK5BC,EAAAA,oBAAoB,EAAG;AALK,CAAzB;AAQP,OAAO,MAAMC,gBAAgB,GAAGC,KAAK,KAAK;AACtCC,EAAAA,IAAI,EAAER,eAAe,CAACC,kBADgB;AAEtCM,EAAAA;AAFsC,CAAL,CAA9B;AAKP,OAAO,SAASE,cAAT,GAA0B;AAC7B,SAAQC,QAAD,IAAc;AACjB,WAAOX,OAAO,CAACY,WAAR,GACFC,IADE,CACGL,KAAK,IAAI;AACXG,MAAAA,QAAQ,CAACJ,gBAAgB,CAACC,KAAD,CAAjB,CAAR;AACH,KAHE,EAGAM,KAHA,CAGMC,KAAK,IAAI;AACd,YAAMA,KAAN;AACH,KALE,CAAP;AAMH,GAPD;AAQH;AAED,OAAO,MAAMC,kBAAkB,GAAG,OAAO;AACrCP,EAAAA,IAAI,EAAER,eAAe,CAACE;AADe,CAAP,CAA3B;AAIP,OAAO,SAASc,cAAT,CAAwBC,IAAxB,EAA8B;AACjC,SAAO,UAAUP,QAAV,EAAoB;AACvB,WAAOX,OAAO,CAACmB,QAAR,CAAiBD,IAAjB,EACFL,IADE,CACG,MAAM;AACR,UAAIK,IAAI,CAACE,EAAT,EAAa;AACTT,QAAAA,QAAQ,CAACU,kBAAkB,EAAnB,CAAR;AACH,OAFD,MAEO;AACHV,QAAAA,QAAQ,CAACK,kBAAkB,EAAnB,CAAR;AACH;AACJ,KAPE,EAOAF,KAPA,CAOMC,KAAK,IAAI;AACd,YAAOA,KAAP;AACH,KATE,CAAP;AAUH,GAXD;AAYH;AAED,OAAO,MAAMO,eAAe,GAAGC,SAAS,KAAK;AACzCd,EAAAA,IAAI,EAAER,eAAe,CAACG,iBADmB;AAEzCc,EAAAA,IAAI,EAAEK;AAFmC,CAAL,CAAjC;AAKP,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAClC,SAAQd,QAAD,IAAc;AACjB,WAAOX,OAAO,CAAC0B,OAAR,CAAgBD,MAAhB,EACFZ,IADE,CACGK,IAAI,IAAI;AACVP,MAAAA,QAAQ,CAACW,eAAe,CAACJ,IAAD,CAAhB,CAAR;AACH,KAHE,EAGAJ,KAHA,CAGMC,KAAK,IAAI;AACd,YAAMA,KAAN;AACH,KALE,CAAP;AAMH,GAPD;AAQH;AAED,OAAO,MAAMM,kBAAkB,GAAG,OAAO;AACrCZ,EAAAA,IAAI,EAAER,eAAe,CAACI;AADe,CAAP,CAA3B;AAKP,OAAO,MAAMsB,kBAAkB,GAAG,OAAO;AACrClB,EAAAA,IAAI,EAAER,eAAe,CAACK;AADe,CAAP,CAA3B;AAKP,OAAO,SAASsB,gBAAT,CAA0BH,MAA1B,EAAkC;AACrC,SAAQd,QAAD,IAAc;AACjB,WAAOX,OAAO,CAAC6B,UAAR,CAAmBJ,MAAnB,EACFZ,IADE,CACG,MAAM;AACRF,MAAAA,QAAQ,CAACgB,kBAAkB,EAAnB,CAAR;AACH,KAHE,EAGAd,IAHA,CAGK,MAAM;AACVF,MAAAA,QAAQ,CAACD,cAAc,EAAf,CAAR;AACH,KALE,EAKAI,KALA,CAKMC,KAAK,IAAI;AACd,YAAMA,KAAN;AACH,KAPE,CAAP;AAQH,GATD;AAUH","sourcesContent":["import BookApi from '../../api/book-api';\n\nexport const BookActionTypes  = {\n    GET_BOOKS_RESPONSE : 'GET_BOOKS_RESPONSE',\n    ADD_NEW_BOOK_RESPONSE : 'ADD_NEW_BOOK_RESPONSE',\n    GET_BOOK_RESPONSE : 'GET_BOOK_RESPONSE',\n    UPDATE_BOOK_RESPONSE : 'UPDATE_BOOK_RESPONSE',\n    DELETE_BOOK_RESPONSE : 'DELETE_BOOK_RESPONSE'\n}\n\nexport const getBooksResponse = books => ({\n    type: BookActionTypes.GET_BOOKS_RESPONSE,\n    books\n});\n\nexport function getBooksAction() {\n    return (dispatch) => {\n        return BookApi.getAllBooks()\n            .then(books => {\n                dispatch(getBooksResponse(books))\n            }).catch(error => {\n                throw error;\n            });\n    };\n}\n\nexport const addNewBookResponse = () => ({\n    type: BookActionTypes.ADD_NEW_BOOK_RESPONSE\n});\n\nexport function saveBookAction(book) {\n    return function (dispatch) {\n        return BookApi.saveBook(book)\n            .then(() => {\n                if (book.id) {\n                    dispatch(updateBookResponse());\n                } else {\n                    dispatch(addNewBookResponse());\n                }\n            }).catch(error => {\n                throw (error);\n            });\n    };\n}\n\nexport const getBookResponse = bookFound => ({\n    type: BookActionTypes.GET_BOOK_RESPONSE,\n    book: bookFound\n});\n\nexport function getBookAction(bookId) {\n    return (dispatch) => {\n        return BookApi.getBook(bookId)\n            .then(book => {\n                dispatch(getBookResponse(book));\n            }).catch(error => {\n                throw error;\n            });\n    };\n}\n\nexport const updateBookResponse = () => ({\n    type: BookActionTypes.UPDATE_BOOK_RESPONSE\n});\n\n\nexport const deleteBookResponse = () => ({\n    type: BookActionTypes.DELETE_BOOK_RESPONSE\n});\n\n\nexport function deleteBookAction(bookId) {\n    return (dispatch) => {\n        return BookApi.deleteBook(bookId)\n            .then(() => {\n                dispatch(deleteBookResponse());\n            }).then(() => {\n                dispatch(getBooksAction());\n            }).catch(error => {\n                throw error;\n            });\n    };\n}"]},"metadata":{},"sourceType":"module"}